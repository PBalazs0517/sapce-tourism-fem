/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function e(){const e=document.getElementsByTagName("main"),t=document.getElementById("home");e[0].innerHTML='<section><h5 class="upper-case clr-sec ff-bar char-space-l fs-sh1 text-align-resp">So, you want to travel to space</h5><h1 class="upper-case clr-accent ff-bell fs-h1 text-align-resp">Space</h1><p class="clr-sec ff-bar fs-bodytxt text-align-resp long-txt">Let’s face it; if you want to go to space, you might as well genuinely go to outer space and not hover kind of on the edge of it. Well sit back, and relax because we’ll give you a truly out of this world experience!</p></section><button class="explore | upper-case clr-pr text-align-cent">Explore</button>',e[0].classList.add("home"),document.body.className="",document.body.classList.add("homeBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi")}function t(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var n="(prefers-reduced-motion: reduce)",i={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function r(e){e.length=0}function o(e,t,n){return Array.prototype.slice.call(e,t,n)}function a(e){return e.bind.apply(e,[null].concat(o(arguments,1)))}var s=setTimeout,c=function(){};function u(e){return requestAnimationFrame(e)}function l(e,t){return typeof t===e}function d(e){return!g(e)&&l("object",e)}var f=Array.isArray,m=a(l,"function"),p=a(l,"string"),h=a(l,"undefined");function g(e){return null===e}function v(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function y(e){return f(e)?e:[e]}function b(e,t){y(e).forEach(t)}function w(e,t){return e.indexOf(t)>-1}function E(e,t){return e.push.apply(e,y(t)),e}function x(e,t,n){e&&b(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function L(e,t){x(e,p(t)?t.split(" "):t,!0)}function S(e,t){b(t,e.appendChild.bind(e))}function k(e,t){b(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function C(e,t){return v(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function A(e,t){var n=e?o(e.children):[];return t?n.filter((function(e){return C(e,t)})):n}function T(e,t){return t?A(e,t)[0]:e.firstElementChild}var P=Object.keys;function M(e,t,n){return e&&(n?P(e).reverse():P(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function _(e){return o(arguments,1).forEach((function(t){M(t,(function(n,i){e[i]=t[i]}))})),e}function B(e){return o(arguments,1).forEach((function(t){M(t,(function(t,n){f(t)?e[n]=t.slice():d(t)?e[n]=B({},d(e[n])?e[n]:{},t):e[n]=t}))})),e}function D(e,t){b(t||P(e),(function(t){delete e[t]}))}function I(e,t){b(e,(function(e){b(t,(function(t){e&&e.removeAttribute(t)}))}))}function N(e,t,n){d(t)?M(t,(function(t,n){N(e,n,t)})):b(e,(function(e){g(n)||""===n?I(e,t):e.setAttribute(t,String(n))}))}function O(e,t,n){var i=document.createElement(e);return t&&(p(t)?L(i,t):N(i,t)),n&&S(n,i),i}function z(e,t,n){if(h(n))return getComputedStyle(e)[t];g(n)||(e.style[t]=""+n)}function H(e,t){z(e,"display",t)}function j(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function R(e,t){return e.getAttribute(t)}function F(e,t){return e&&e.classList.contains(t)}function G(e){return e.getBoundingClientRect()}function W(e){b(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function X(e){return T((new DOMParser).parseFromString(e,"text/html").body)}function q(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function U(e,t){return e&&e.querySelector(t)}function Y(e,t){return t?o(e.querySelectorAll(t)):[]}function J(e,t){x(e,t,!1)}function K(e){return e.timeStamp}function V(e){return p(e)?e:e?e+"px":""}var Q="splide",Z="data-"+Q;function $(e,t){if(!e)throw new Error("["+Q+"] "+(t||""))}var ee=Math.min,te=Math.max,ne=Math.floor,ie=Math.ceil,re=Math.abs;function oe(e,t,n){return re(e-t)<n}function ae(e,t,n,i){var r=ee(t,n),o=te(t,n);return i?r<e&&e<o:r<=e&&e<=o}function se(e,t,n){var i=ee(t,n),r=te(t,n);return ee(te(i,e),r)}function ce(e){return+(e>0)-+(e<0)}function ue(e,t){return b(t,(function(t){e=e.replace("%s",""+t)})),e}function le(e){return e<10?"0"+e:""+e}var de={};function fe(){var e=[];function t(e,t,n){b(e,(function(e){e&&b(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,r,o){t(n,i,(function(t,n,i){var a="addEventListener"in t,s=a?t.removeEventListener.bind(t,n,r,o):t.removeListener.bind(t,r);a?t.addEventListener(n,r,o):t.addListener(r),e.push([t,n,i,r,s])}))},unbind:function(n,i,r){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||r&&e[3]!==r)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),r(e)}}}var me="mounted",pe="ready",he="move",ge="moved",ve="click",ye="refresh",be="updated",we="resize",Ee="resized",xe="scroll",Le="scrolled",Se="destroy",ke="navigation:mounted",Ce="autoplay:play",Ae="autoplay:pause",Te="lazyload:loaded",Pe="ei";function Me(e){var t=e?e.event.bus:document.createDocumentFragment(),n=fe();return e&&e.event.on(Se,n.destroy),_(n,{bus:t,on:function(e,i){n.bind(t,y(e).join(" "),(function(e){i.apply(i,f(e.detail)?e.detail:[])}))},off:a(n.unbind,t),emit:function(e){n.dispatch(t,e,o(arguments,1))}})}function _e(e,t,n,i){var r,o,a=Date.now,s=0,c=!0,l=0;function d(){if(!c){if(s=e?ee((a()-r)/e,1):1,n&&n(s),s>=1&&(t(),r=a(),i&&++l>=i))return f();o=u(d)}}function f(){c=!0}function m(){o&&cancelAnimationFrame(o),s=0,o=0,c=!0}return{start:function(t){t||m(),r=a()-(t?s*e:0),c=!1,o=u(d)},rewind:function(){r=a(),s=0,n&&n(s)},pause:f,cancel:m,set:function(t){e=t},isPaused:function(){return c}}}var Be="Arrow",De=Be+"Left",Ie=Be+"Right",Ne=Be+"Up",Oe=Be+"Down",ze="ttb",He={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Ne,Ie],ArrowRight:[Oe,De]};var je="role",Re="tabindex",Fe="aria-",Ge=Fe+"controls",We=Fe+"current",Xe=Fe+"selected",qe=Fe+"label",Ue=Fe+"labelledby",Ye=Fe+"hidden",Je=Fe+"orientation",Ke=Fe+"roledescription",Ve=Fe+"live",Qe=Fe+"busy",Ze=Fe+"atomic",$e=[je,Re,"disabled",Ge,We,qe,Ue,Ye,Je,Ke],et=Q+"__",tt="is-",nt=Q,it=et+"track",rt=et+"list",ot=et+"slide",at=ot+"--clone",st=ot+"__container",ct=et+"arrows",ut=et+"arrow",lt=ut+"--prev",dt=ut+"--next",ft=et+"pagination",mt=ft+"__page",pt=et+"progress__bar",ht=et+"toggle",gt=et+"sr",vt=tt+"initialized",yt=tt+"active",bt=tt+"prev",wt=tt+"next",Et=tt+"visible",xt=tt+"loading",Lt=tt+"focus-in",St=tt+"overflow",kt=[yt,Et,bt,wt,xt,Lt,St],Ct={slide:ot,clone:at,arrows:ct,arrow:ut,prev:lt,next:dt,pagination:ft,page:mt,spinner:et+"spinner"},At="touchstart mousedown",Tt="touchmove mousemove",Pt="touchend touchcancel mouseup click",Mt="slide",_t="loop",Bt="fade";var Dt=Z+"-interval",It={passive:!1,capture:!0},Nt={Spacebar:" ",Right:Ie,Left:De,Up:Ne,Down:Oe};function Ot(e){return e=p(e)?e:e.key,Nt[e]||e}var zt="keydown",Ht=Z+"-lazy",jt=Ht+"-srcset",Rt="["+Ht+"], ["+jt+"]",Ft=[" ","Enter"],Gt=Object.freeze({__proto__:null,Media:function(e,t,i){var r=e.state,o=i.breakpoints||{},a=i.reducedMotion||{},s=fe(),c=[];function u(e){e&&s.destroy()}function l(e,t){var n=matchMedia(t);s.bind(n,"change",d),c.push([e,n])}function d(){var t=r.is(7),n=i.direction,o=c.reduce((function(e,t){return B(e,t[1].matches?t[0]:{})}),{});D(i),f(o),i.destroy?e.destroy("completely"===i.destroy):t?(u(!0),e.mount()):n!==i.direction&&e.refresh()}function f(t,n,o){B(i,t),n&&B(Object.getPrototypeOf(i),t),!o&&r.is(1)||e.emit(be,i)}return{setup:function(){var e="min"===i.mediaQuery;P(o).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){l(o[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),l(a,n),d()},destroy:u,reduce:function(e){matchMedia(n).matches&&(e?B(i,a):D(i,P(a)))},set:f}},Direction:function(e,t,n){return{resolve:function(e,t,i){var r="rtl"!==(i=i||n.direction)||t?i===ze?0:-1:1;return He[e]&&He[e][r]||e.replace(/width|left|right/i,(function(e,t){var n=He[e.toLowerCase()][r]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,o,a,s=Me(e),c=s.on,u=s.bind,l=e.root,d=n.i18n,f={},p=[],h=[],g=[];function v(){var e,t,r;i=w("."+it),o=T(i,"."+rt),$(i&&o,"A track/list element is missing."),E(p,A(o,"."+ot+":not(."+at+")")),M({arrows:ct,pagination:ft,prev:lt,next:dt,bar:pt,toggle:ht},(function(e,t){f[t]=w("."+e)})),_(f,{root:l,track:i,list:o,slides:p}),t=l.id||""+(e=Q)+le(de[e]=(de[e]||0)+1),r=n.role,l.id=t,i.id=i.id||t+"-track",o.id=o.id||t+"-list",!R(l,je)&&"SECTION"!==l.tagName&&r&&N(l,je,r),N(l,Ke,d.carousel),N(o,je,"presentation"),b()}function y(e){var t=$e.concat("style");r(p),J(l,h),J(i,g),I([i,o],t),I(l,e?t:["style",Ke])}function b(){J(l,h),J(i,g),h=S(nt),g=S(it),L(l,h),L(i,g),N(l,qe,n.label),N(l,Ue,n.labelledby)}function w(e){var t=U(l,e);return t&&function(e,t){if(m(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!C(n,t);)n=n.parentElement;return n}(t,"."+nt)===l?t:void 0}function S(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===nt&&yt]}return _(f,{setup:v,mount:function(){c(ye,y),c(ye,v),c(be,b),u(document,At+" keydown",(function(e){a="keydown"===e.type}),{capture:!0}),u(l,"focusin",(function(){x(l,Lt,!!a)}))},destroy:y})},Slides:function(e,t,n){var i=Me(e),o=i.on,s=i.emit,c=i.bind,u=t.Elements,l=u.slides,d=u.list,f=[];function h(){l.forEach((function(e,t){E(e,t,-1)}))}function g(){P((function(e){e.destroy()})),r(f)}function E(t,n,i){var r=function(e,t,n,i){var r,o=Me(e),s=o.on,c=o.emit,u=o.bind,l=e.Components,d=e.root,f=e.options,m=f.isNavigation,p=f.updateOnMove,h=f.i18n,g=f.pagination,v=f.slideFocus,y=l.Direction.resolve,b=R(i,"style"),w=R(i,qe),E=n>-1,L=T(i,"."+st);function S(){var r=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");N(i,qe,ue(h.slideX,(E?n:t)+1)),N(i,Ge,r),N(i,je,v?"button":""),v&&I(i,Ke)}function k(){r||C()}function C(){if(!r){var n=e.index;(o=A())!==F(i,yt)&&(x(i,yt,o),N(i,We,m&&o||""),c(o?"active":"inactive",P)),function(){var t=function(){if(e.is(Bt))return A();var t=G(l.Elements.track),n=G(i),r=y("left",!0),o=y("right",!0);return ne(t[r])<=ie(n[r])&&ne(n[o])<=ie(t[o])}(),n=!t&&(!A()||E);if(e.state.is([4,5])||N(i,Ye,n||""),N(Y(i,f.focusableNodes||""),Re,n?-1:""),v&&N(i,Re,n?-1:0),t!==F(i,Et)&&(x(i,Et,t),c(t?"visible":"hidden",P)),!t&&document.activeElement===i){var r=l.Slides.getAt(e.index);r&&j(r.slide)}}(),x(i,bt,t===n-1),x(i,wt,t===n+1)}var o}function A(){var i=e.index;return i===t||f.cloneStatus&&i===n}var P={index:t,slideIndex:n,slide:i,container:L,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+le(t+1),N(i,je,g?"tabpanel":"group"),N(i,Ke,h.slide),N(i,qe,w||ue(h.slideLabel,[t+1,e.length]))),u(i,"click",a(c,ve,P)),u(i,"keydown",a(c,"sk",P)),s([ge,"sh",Le],C),s(ke,S),p&&s(he,k)},destroy:function(){r=!0,o.destroy(),J(i,kt),I(i,$e),N(i,"style",b),N(i,qe,w||"")},update:C,style:function(e,t,n){z(n&&L||i,e,t)},isWithin:function(n,i){var r=re(n-t);return E||!f.rewind&&!e.is(_t)||(r=ee(r,e.length-r)),r<=i}};return P}(e,n,i,t);r.mount(),f.push(r),f.sort((function(e,t){return e.index-t.index}))}function A(e){return e?M((function(e){return!e.isClone})):f}function P(e,t){A(t).forEach(e)}function M(e){return f.filter(m(e)?e:function(t){return p(e)?C(t.slide,e):w(y(e),t.index)})}return{mount:function(){h(),o(ye,g),o(ye,h)},destroy:g,update:function(){P((function(e){e.update()}))},register:E,get:A,getIn:function(e){var i=t.Controller,r=i.toIndex(e),o=i.hasFocus()?1:n.perPage;return M((function(e){return ae(e.index,r,r+o-1)}))},getAt:function(e){return M(e)[0]},add:function(e,t){b(e,(function(e){if(p(e)&&(e=X(e)),v(e)){var i=l[t];i?k(e,i):S(d,e),L(e,n.classes.slide),r=e,o=a(s,we),u=Y(r,"img"),(f=u.length)?u.forEach((function(e){c(e,"load error",(function(){--f||o()}))})):o()}var r,o,u,f})),s(ye)},remove:function(e){W(M(e).map((function(e){return e.slide}))),s(ye)},forEach:P,filter:M,style:function(e,t,n){P((function(i){i.style(e,t,n)}))},getLength:function(e){return e?l.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(e,t,n){var i,r,o,s=Me(e),c=s.on,u=s.bind,l=s.emit,f=t.Slides,m=t.Direction.resolve,p=t.Elements,h=p.root,g=p.track,v=p.list,y=f.getAt,b=f.style;function w(){i=n.direction===ze,z(h,"maxWidth",V(n.width)),z(g,m("paddingLeft"),L(!1)),z(g,m("paddingRight"),L(!0)),E(!0)}function E(e){var t,a=G(h);(e||r.width!==a.width||r.height!==a.height)&&(z(g,"height",(t="",i&&($(t=S(),"height or heightRatio is missing."),t="calc("+t+" - "+L(!1)+" - "+L(!0)+")"),t)),b(m("marginRight"),V(n.gap)),b("width",n.autoWidth?null:V(n.fixedWidth)||(i?"":k())),b("height",V(n.fixedHeight)||(i?n.autoHeight?null:k():S()),!0),r=a,l(Ee),o!==(o=_())&&(x(h,St,o),l("overflow",o)))}function L(e){var t=n.padding,i=m(e?"right":"left");return t&&V(t[i]||(d(t)?0:t))||"0px"}function S(){return V(n.height||G(v).width*n.heightRatio)}function k(){var e=V(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function C(){return G(v)[m("width")]}function A(e,t){var n=y(e||0);return n?G(n.slide)[m("width")]+(t?0:M()):0}function T(e,t){var n=y(e);if(n){var i=G(n.slide)[m("right")],r=G(v)[m("left")];return re(i-r)+(t?0:M())}return 0}function P(t){return T(e.length-1)-T(0)+A(0,t)}function M(){var e=y(0);return e&&parseFloat(z(e.slide,m("marginRight")))||0}function _(){return e.is(Bt)||P(!0)>C()}return{mount:function(){var e,t;w(),u(window,"resize load",(e=a(l,we),t=_e(0,e,null,1),function(){t.isPaused()&&t.start()})),c([be,ye],w),c(we,E)},resize:E,listSize:C,slideSize:A,sliderSize:P,totalSize:T,getPadding:function(e){return parseFloat(z(g,m("padding"+(e?"Right":"Left"))))||0},isOverflow:_}},Clones:function(e,t,n){var i,o=Me(e),a=o.on,s=t.Elements,c=t.Slides,u=t.Direction.resolve,l=[];function d(){a(ye,f),a([be,we],p),(i=g())&&(function(t){var i=c.get().slice(),r=i.length;if(r){for(;i.length<t;)E(i,i);E(i.slice(-t),i.slice(0,t)).forEach((function(o,a){var u=a<t,d=function(t,i){var r=t.cloneNode(!0);return L(r,n.classes.clone),r.id=e.root.id+"-clone"+le(i+1),r}(o.slide,a);u?k(d,i[0].slide):S(s.list,d),E(l,d),c.register(d,a-t+(u?0:r),o.index)}))}}(i),t.Layout.resize(!0))}function f(){m(),d()}function m(){W(l),r(l),o.destroy()}function p(){var e=g();i!==e&&(i<e||!e)&&o.emit(ye)}function g(){var i=n.clones;if(e.is(_t)){if(h(i)){var r=n[u("fixedWidth")]&&t.Layout.slideSize(0);i=r&&ie(G(s.track)[u("width")]/r)||n[u("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:m}},Move:function(e,t,n){var i,r=Me(e),o=r.on,a=r.emit,s=e.state.set,c=t.Layout,u=c.slideSize,l=c.getPadding,d=c.totalSize,f=c.listSize,m=c.sliderSize,p=t.Direction,g=p.resolve,v=p.orient,y=t.Elements,b=y.list,w=y.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),x(e.index),t.Slides.update())}function x(e){L(A(e,!0))}function L(n,i){if(!e.is(Bt)){var r=i?n:function(n){if(e.is(_t)){var i=C(n),r=i>t.Controller.getEnd();(i<0||r)&&(n=S(n,r))}return n}(n);z(b,"transform","translate"+g("X")+"("+r+"px)"),n!==r&&a("sh")}}function S(e,t){var n=e-P(t),i=m();return e-v(i*(ie(re(n)/i)||1))*(t?1:-1)}function k(){L(T(),!0),i.cancel()}function C(e){for(var n=t.Slides.get(),i=0,r=1/0,o=0;o<n.length;o++){var a=n[o].index,s=re(A(a,!0)-e);if(!(s<=r))break;r=s,i=a}return i}function A(t,i){var r=v(d(t-1)-function(e){var t=n.focus;return"center"===t?(f()-u(e,!0))/2:+t*u(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(Mt)&&(t=se(t,0,v(m(!0)-f()))),t}(r):r}function T(){var e=g("left");return G(b)[e]-G(w)[e]+v(l(!1))}function P(e){return A(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,o([me,Ee,be,ye],E)},move:function(e,t,n,r){var o,c;e!==t&&(o=e>n,c=v(S(T(),o)),o?c>=0:c<=b[g("scrollWidth")]-G(w)[g("width")])&&(k(),L(S(T(),e>n),!0)),s(4),a(he,t,n,e),i.start(t,(function(){s(3),a(ge,t,n,e),r&&r()}))},jump:x,translate:L,shift:S,cancel:k,toIndex:C,toPosition:A,getPosition:T,getLimit:P,exceededLimit:function(e,t){t=h(t)?T():t;var n=!0!==e&&v(t)<v(P(!1)),i=!1!==e&&v(t)>v(P(!0));return n||i},reposition:E}},Controller:function(e,t,n){var i,r,o,s,c=Me(e),u=c.on,l=c.emit,d=t.Move,f=d.getPosition,m=d.getLimit,g=d.toPosition,v=t.Slides,y=v.isEnough,b=v.getLength,w=n.omitEnd,E=e.is(_t),x=e.is(Mt),L=a(P,!1),S=a(P,!0),k=n.start||0,C=k;function A(){r=b(!0),o=n.perMove,s=n.perPage,i=B();var e=se(k,0,w?i:r-1);e!==k&&(k=e,d.reposition())}function T(){i!==B()&&l(Pe)}function P(e,t){var n=o||(O()?1:s),r=M(k+n*(e?-1:1),k,!(o||O()));return-1===r&&x&&!oe(f(),m(!e),1)?e?0:i:t?r:_(r)}function M(t,a,c){if(y()||O()){var u=function(t){if(x&&"move"===n.trimSpace&&t!==k)for(var i=f();i===g(t,!0)&&ae(t,0,e.length-1,!n.rewind);)t<k?--t:++t;return t}(t);u!==t&&(a=t,t=u,c=!1),t<0||t>i?t=o||!ae(0,t,a,!0)&&!ae(i,a,t,!0)?E?c?t<0?-(r%s||s):r:t:n.rewind?t<0?i:0:-1:D(I(t)):c&&t!==a&&(t=D(I(a)+(t<a?-1:1)))}else t=-1;return t}function _(e){return E?(e+r)%r||0:e}function B(){for(var e=r-(O()||E&&o?1:s);w&&e-- >0;)if(g(r-1,!0)!==g(e,!0)){e++;break}return se(e,0,r-1)}function D(e){return se(O()?e:s*e,0,i)}function I(e){return O()?ee(e,i):ne((e>=i?r-1:e)/s)}function N(e){e!==k&&(C=k,k=e)}function O(){return!h(n.focus)||n.isNavigation}function z(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){A(),u([be,ye,Pe],A),u(Ee,T)},go:function(e,t,n){if(!z()){var r=function(e){var t=k;if(p(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],r=n[1],o=n[2];"+"===r||"-"===r?t=M(k+ +(""+r+(+o||1)),k):">"===r?t=o?D(+o):L(!0):"<"===r&&(t=S(!0))}else t=E?e:se(e,0,i);return t}(e),o=_(r);o>-1&&(t||o!==k)&&(N(o),d.move(r,o,C,n))}},scroll:function(e,n,r,o){t.Scroll.scroll(e,n,r,(function(){var e=_(d.toIndex(f()));N(w?ee(e,i):e),o&&o()}))},getNext:L,getPrev:S,getAdjacent:P,getEnd:B,setIndex:N,getIndex:function(e){return e?C:k},toIndex:D,toPage:I,toDest:function(e){var t=d.toIndex(e);return x?se(t,0,i):t},hasFocus:O,isBusy:z}},Arrows:function(e,t,n){var i,r,o=Me(e),s=o.on,c=o.bind,u=o.emit,l=n.classes,d=n.i18n,f=t.Elements,m=t.Controller,p=f.arrows,h=f.track,g=p,v=f.prev,y=f.next,b={};function w(){var e;!(e=n.arrows)||v&&y||(g=p||O("div",l.arrows),v=A(!0),y=A(!1),i=!0,S(g,[v,y]),!p&&k(g,h)),v&&y&&(_(b,{prev:v,next:y}),H(g,e?"":"none"),L(g,r=ct+"--"+n.direction),e&&(s([me,ge,ye,Le,Pe],T),c(y,"click",a(C,">")),c(v,"click",a(C,"<")),T(),N([v,y],Ge,h.id),u("arrows:mounted",v,y))),s(be,E)}function E(){x(),w()}function x(){o.destroy(),J(g,r),i?(W(p?[v,y]:g),v=y=null):I([v,y],$e)}function C(e){m.go(e,!0)}function A(e){return X('<button class="'+l.arrow+" "+(e?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function T(){if(v&&y){var t=e.index,n=m.getPrev(),i=m.getNext(),r=n>-1&&t<n?d.last:d.prev,o=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,N(v,qe,r),N(y,qe,o),u("arrows:updated",v,y,n,i)}}return{arrows:b,mount:w,destroy:x,update:T}},Autoplay:function(e,t,n){var i,r,o=Me(e),a=o.on,s=o.bind,c=o.emit,u=_e(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&z(t,"width",100*e+"%"),c("autoplay:playing",e)})),l=u.isPaused,d=t.Elements,f=t.Elements,m=f.root,p=f.toggle,h=n.autoplay,g="pause"===h;function v(){l()&&t.Slides.isEnough()&&(u.start(!n.resetProgress),r=i=g=!1,w(),c(Ce))}function y(e){void 0===e&&(e=!0),g=!!e,w(),l()||(u.pause(),c(Ae))}function b(){g||(i||r?y(!1):v())}function w(){p&&(x(p,yt,!g),N(p,qe,n.i18n[g?"play":"pause"]))}function E(e){var i=t.Slides.getAt(e);u.set(i&&+R(i.slide,Dt)||n.interval)}return{mount:function(){h&&(n.pauseOnHover&&s(m,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,b()})),n.pauseOnFocus&&s(m,"focusin focusout",(function(e){r="focusin"===e.type,b()})),p&&s(p,"click",(function(){g?v():y(!0)})),a([he,xe,ye],u.rewind),a(he,E),p&&N(p,Ge,d.track.id),g||v(),w())},destroy:u.cancel,play:v,pause:y,isPaused:l}},Cover:function(e,t,n){var i=Me(e).on;function r(e){t.Slides.forEach((function(t){var n=T(t.container||t.slide,"img");n&&n.src&&o(e,n,t)}))}function o(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),H(t,e?"none":"")}return{mount:function(){n.cover&&(i(Te,a(o,!0)),i([me,be,ye],a(r,!0)))},destroy:a(r,!1)}},Scroll:function(e,t,n){var i,r,o=Me(e),s=o.on,c=o.emit,u=e.state.set,l=t.Move,d=l.getPosition,f=l.getLimit,m=l.exceededLimit,p=l.translate,h=e.is(Mt),g=1;function v(e,n,o,s,f){var p=d();if(w(),o&&(!h||!m())){var v=t.Layout.sliderSize(),E=ce(e)*v*ne(re(e)/v)||0;e=l.toPosition(t.Controller.toDest(e%v))+E}var x=oe(p,e,1);g=1,n=x?0:n||te(re(e-p)/1.5,800),r=s,i=_e(n,y,a(b,p,e,f),1),u(5),c(xe),i.start()}function y(){u(3),r&&r(),c(Le)}function b(e,t,i,o){var a,s,c=d(),u=(e+(t-e)*(a=o,(s=n.easingFunc)?s(a):1-Math.pow(1-a,4))-c)*g;p(c+u),h&&!i&&m()&&(g*=.6,re(u)<10&&v(f(m(!0)),600,!1,r,!0))}function w(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(w(),y())}return{mount:function(){s(he,w),s([be,ye],E)},destroy:w,scroll:v,cancel:E}},Drag:function(e,t,n){var i,r,o,a,s,u,l,f,m=Me(e),p=m.on,h=m.emit,g=m.bind,v=m.unbind,y=e.state,b=t.Move,w=t.Scroll,E=t.Controller,x=t.Elements.track,L=t.Media.reduce,S=t.Direction,k=S.resolve,A=S.orient,T=b.getPosition,P=b.exceededLimit,M=!1;function _(){var e=n.drag;G(!e),a="free"===e}function B(e){if(u=!1,!l){var t=F(e);i=e.target,r=n.noDrag,C(i,"."+mt+", ."+ut)||r&&C(i,r)||!t&&e.button||(E.isBusy()?q(e,!0):(f=t?x:window,s=y.is([4,5]),o=null,g(f,Tt,D,It),g(f,Pt,I,It),b.cancel(),w.cancel(),O(e)))}var i,r}function D(t){if(y.is(6)||(y.set(6),h("drag")),t.cancelable)if(s){b.translate(i+z(t)/(M&&e.is(Mt)?5:1));var r=H(t)>200,o=M!==(M=P());(r||o)&&O(t),u=!0,h("dragging"),q(t)}else(function(e){return re(z(e))>re(z(e,!0))})(t)&&(s=function(e){var t=n.dragMinThreshold,i=d(t),r=i&&t.mouse||0,o=(i?t.touch:+t)||10;return re(z(e))>(F(e)?o:r)}(t),q(t))}function I(i){y.is(6)&&(y.set(3),h("dragged")),s&&(function(i){var r=function(t){if(e.is(_t)||!M){var n=H(t);if(n&&n<200)return z(t)/n}return 0}(i),o=function(e){return T()+ce(e)*ee(re(e)*(n.flickPower||600),a?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(r),s=n.rewind&&n.rewindByDrag;L(!1),a?E.scroll(o,0,n.snap):e.is(Bt)?E.go(A(ce(r))<0?s?"<":"-":s?">":"+"):e.is(Mt)&&M&&s?E.go(P(!0)?">":"<"):E.go(E.toDest(o),!0),L(!0)}(i),q(i)),v(f,Tt,D),v(f,Pt,I),s=!1}function N(e){!l&&u&&q(e,!0)}function O(e){o=r,r=e,i=T()}function z(e,t){return R(e,t)-R(j(e),t)}function H(e){return K(e)-K(j(e))}function j(e){return r===e&&o||r}function R(e,t){return(F(e)?e.changedTouches[0]:e)["page"+k(t?"Y":"X")]}function F(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function G(e){l=e}return{mount:function(){g(x,Tt,c,It),g(x,Pt,c,It),g(x,At,B,It),g(x,"click",N,{capture:!0}),g(x,"dragstart",q),p([me,be],_)},disable:G,isDragging:function(){return s}}},Keyboard:function(e,t,n){var i,r,o=Me(e),a=o.on,c=o.bind,u=o.unbind,l=e.root,d=t.Direction.resolve;function f(){var e=n.keyboard;e&&(i="global"===e?window:l,c(i,zt,h))}function m(){u(i,zt)}function p(){var e=r;r=!0,s((function(){r=e}))}function h(t){if(!r){var n=Ot(t);n===d(De)?e.go("<"):n===d(Ie)&&e.go(">")}}return{mount:function(){f(),a(be,m),a(be,f),a(he,p)},destroy:m,disable:function(e){r=e}}},LazyLoad:function(e,t,n){var i=Me(e),o=i.on,s=i.off,c=i.bind,u=i.emit,l="sequential"===n.lazyLoad,d=[ge,Le],f=[];function m(){r(f),t.Slides.forEach((function(e){Y(e.slide,Rt).forEach((function(t){var i=R(t,Ht),r=R(t,jt);if(i!==t.src||r!==t.srcset){var o=n.classes.spinner,a=t.parentElement,s=T(a,"."+o)||O("span",o,a);f.push([t,e,s]),t.src||H(t,"none")}}))})),l?v():(s(d),o(d,p),p())}function p(){(f=f.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||h(t)}))).length||s(d)}function h(e){var t=e[0];L(e[1].slide,xt),c(t,"load error",a(g,e)),N(t,"src",R(t,Ht)),N(t,"srcset",R(t,jt)),I(t,Ht),I(t,jt)}function g(e,t){var n=e[0],i=e[1];J(i.slide,xt),"error"!==t.type&&(W(e[2]),H(n,""),u(Te,n,i),u(we)),l&&v()}function v(){f.length&&h(f.shift())}return{mount:function(){n.lazyLoad&&(m(),o(ye,m))},destroy:a(r,f),check:p}},Pagination:function(e,t,n){var i,s,c=Me(e),u=c.on,l=c.emit,d=c.bind,f=t.Slides,m=t.Elements,p=t.Controller,h=p.hasFocus,g=p.getIndex,v=p.go,y=t.Direction.resolve,b=m.pagination,w=[];function E(){i&&(W(b?o(i.children):i),J(i,s),r(w),i=null),c.destroy()}function x(e){v(">"+e,!0)}function S(e,t){var n=w.length,i=Ot(t),r=k(),o=-1;i===y(Ie,!1,r)?o=++e%n:i===y(De,!1,r)?o=(--e+n)%n:"Home"===i?o=0:"End"===i&&(o=n-1);var a=w[o];a&&(j(a.button),v(">"+o),q(t,!0))}function k(){return n.paginationDirection||n.direction}function C(e){return w[p.toPage(e)]}function A(){var e=C(g(!0)),t=C(g());if(e){var n=e.button;J(n,yt),I(n,Xe),N(n,Re,-1)}if(t){var r=t.button;L(r,yt),N(r,Xe,!0),N(r,Re,"")}l("pagination:updated",{list:i,items:w},e,t)}return{items:w,mount:function t(){E(),u([be,ye,Pe],t);var r=n.pagination;b&&H(b,r?"":"none"),r&&(u([he,xe,Le],A),function(){var t=e.length,r=n.classes,o=n.i18n,c=n.perPage,u=h()?p.getEnd()+1:ie(t/c);L(i=b||O("ul",r.pagination,m.track.parentElement),s=ft+"--"+k()),N(i,je,"tablist"),N(i,qe,o.select),N(i,Je,k()===ze?"vertical":"");for(var l=0;l<u;l++){var g=O("li",null,i),v=O("button",{class:r.page,type:"button"},g),y=f.getIn(l).map((function(e){return e.slide.id})),E=!h()&&c>1?o.pageX:o.slideX;d(v,"click",a(x,l)),n.paginationKeyboard&&d(v,"keydown",a(S,l)),N(g,je,"presentation"),N(v,je,"tab"),N(v,Ge,y.join(" ")),N(v,qe,ue(E,l+1)),N(v,Re,-1),w.push({li:g,button:v,page:l})}}(),A(),l("pagination:mounted",{list:i,items:w},C(e.index)))},destroy:E,getAt:C,update:A}},Sync:function(e,t,n){var i=n.isNavigation,o=n.slideFocus,s=[];function c(){var t,n;e.splides.forEach((function(t){t.isParent||(l(e,t.splide),l(t.splide,e))})),i&&((n=(t=Me(e)).on)(ve,f),n("sk",m),n([me,be],d),s.push(t),t.emit(ke,e.splides))}function u(){s.forEach((function(e){e.destroy()})),r(s)}function l(e,t){var n=Me(e);n.on(he,(function(e,n,i){t.go(t.is(_t)?i:e)})),s.push(n)}function d(){N(t.Elements.list,Je,n.direction===ze?"vertical":"")}function f(t){e.go(t.index)}function m(e,t){w(Ft,Ot(t))&&(f(e),q(t))}return{setup:a(t.Media.set,{slideFocus:h(o)?i:o},!0),mount:c,destroy:u,remount:function(){u(),c()}}},Wheel:function(e,t,n){var i=Me(e).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,a=o<0,s=K(i),c=n.wheelMinThreshold||0,u=n.wheelSleep||0;re(o)>c&&s-r>u&&(e.go(a?"<":">"),r=s),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(a)&&q(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",o,It)}}},Live:function(e,t,n){var i=Me(e).on,r=t.Elements.track,o=n.live&&!n.isNavigation,s=O("span",gt),c=_e(90,a(u,!1));function u(e){N(r,Qe,e),e?(S(r,s),c.start()):(W(s),c.cancel())}function l(e){o&&N(r,Ve,e?"off":"polite")}return{mount:function(){o&&(l(!t.Autoplay.isPaused()),N(r,Ze,!0),s.textContent="…",i(Ce,a(l,!0)),i(Ae,a(l,!1)),i([ge,Le],a(u,!0)))},disable:l,destroy:function(){I(r,[Ve,Ze,Qe]),W(s)}}}}),Wt={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Ct,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Xt(e,t,n){var i=t.Slides;function r(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){Me(e).on([me,ye],r)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),s(t)},cancel:c}}function qt(e,t,n){var i,r=t.Move,o=t.Controller,s=t.Scroll,c=t.Elements.list,u=a(z,c,"transition");function l(){u(""),s.cancel()}return{mount:function(){Me(e).bind(c,"transitionend",(function(e){e.target===c&&i&&(l(),i())}))},start:function(t,a){var c=r.toPosition(t,!0),l=r.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(Mt)&&i){var r=o.getIndex(!0),a=o.getEnd();if(0===r&&t>=a||r>=a&&0===t)return i}return n.speed}(t);re(c-l)>=1&&d>=1?n.useScroll?s.scroll(c,d,!1,a):(u("transform "+d+"ms "+n.easing),r.translate(c,!0),i=a):(r.jump(t),a())},cancel:l}}var Ut=function(){function e(t,n){var i;this.event=Me(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return w(y(e),i)}}),this.splides=[],this._o={},this._E={};var r=p(t)?U(document,t):t;$(r,r+" is invalid."),this.root=r,n=B({label:R(r,qe)||"",labelledby:R(r,Ue)||""},Wt,e.defaults,n||{});try{B(n,JSON.parse(R(r,Z)))}catch(e){$(!1,"Invalid JSON")}this._o=Object.create(B({},n))}var n,i,a=e.prototype;return a.mount=function(e,t){var n=this,i=this.state,r=this.Components;return $(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=t||this._T||(this.is(Bt)?Xt:qt),this._E=e||this._E,M(_({},Gt,this._E,{Transition:this._T}),(function(e,t){var i=e(n,r,n._o);r[t]=i,i.setup&&i.setup()})),M(r,(function(e){e.mount&&e.mount()})),this.emit(me),L(this.root,vt),i.set(3),this.emit(pe),this},a.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},a.go=function(e){return this._C.Controller.go(e),this},a.on=function(e,t){return this.event.on(e,t),this},a.off=function(e){return this.event.off(e),this},a.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(o(arguments,1))),this},a.add=function(e,t){return this._C.Slides.add(e,t),this},a.remove=function(e){return this._C.Slides.remove(e),this},a.is=function(e){return this._o.type===e},a.refresh=function(){return this.emit(ye),this},a.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?Me(this).on(pe,this.destroy.bind(this,e)):(M(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Se),t.destroy(),e&&r(this.splides),n.set(7)),this},n=e,(i=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&t(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();Ut.defaults={},Ut.STATES=i,window.devicePixelRatio>1?document.getElementsByTagName("html")[0].style.cssText="font-size: 12px;":document.getElementsByTagName("html")[0].style.cssText="font-size: 16px;",console.log(document.getElementsByTagName("html")[0]),function(){const t=document.getElementById("navBtn"),n=document.getElementById("nav");let i=!1;t.addEventListener("click",(()=>{i?(t.src="./img/shared/icon-hamburger.svg",i=!1):(t.src="./img/shared/icon-close.svg",i=!0),n.classList.toggle("navPhoneStyle")}));const r=Array.from(document.querySelectorAll(".navOpt"));r.forEach((t=>{t.addEventListener("click",(()=>{r.forEach((e=>e.classList.remove("selectedLi"))),0==t.dataset.page&&e(),1==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("destination");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m" ><span class="fw-700">01</span>pick your destination</h5><section class="dest-cont"><img draggable="false" id="destImg" src="./img/destination/image-moon.png" alt="moon"><section class="dest-text-cont"><ul><li data-num="0" class="destOpt selectedDestOpt | clr-sec fs-bodytxt ff-bar upper-case">moon</li><li data-num="1" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">mars</li><li data-num="2" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">europa</li><li data-num="3" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">titan</li></ul><h2 id="destName" class="clr-accent ff-bell fs-h2 upper-case ">moon</h2><p id="destDesc" class="dest-desc | text-align-resp long-txt clr-sec fs-bodytxt ff-bar">See our planet as you’ve never seen it before. A perfect relaxing trip away to help regain perspective and come back refreshed. While you’re there, take in some history by visiting the Luna 2 and Apollo 11 landing sites.</p><section class="dest-data-cont"><h5 class="fs-bodytxt clr-sec ff-bar upper-case">avg. distance</h5><p id="destDist" class="clr-accent fs-h5 ff-bell upper-case fw-500">348,400 km</p><h5 class="fs-bodytxt clr-sec ff-bar upper-case">est. travel time</h5><p id="destTime" class="clr-accent fs-h5 ff-bell upper-case fw-500">3 days</p></section></section></section>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("destinationBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),function(){const e=Array.from(document.querySelectorAll(".destOpt")),t=[{title:"Moon",text:"See our planet as you’ve never seen it before. A perfect relaxing trip away to help regain perspective and come back refreshed. While you’re there, take in some history by visiting the Luna 2 and Apollo 11 landing sites.",url:"./img/destination/image-moon.png",dist:"384,400 km",time:"3 days"},{title:"Mars",text:"Don’t forget to pack your hiking boots. You’ll need them to tackle Olympus Mons, the tallest planetary mountain in our solar system. It’s two and a half times the size of Everest!",url:"./img/destination/image-mars.png",dist:"225 mil. km",time:"9 months"},{title:"Europa",text:"The smallest of the four Galilean moons orbiting Jupiter, Europa is a winter lover’s dream. With an icy surface, it’s perfect for a bit of ice skating, curling, hockey, or simple relaxation in your snug wintery cabin.",url:"./img/destination/image-europa.png",dist:"628 mil. km",time:"3 years"},{title:"Titan",text:"  The only moon known to have a dense atmosphere other than Earth, Titan is a home away from home (just a few hundred degrees colder!). As a bonus, you get striking views of the Rings of Saturn.",url:"./img/destination/image-titan.png",dist:"1.6 bil. km",time:"7 years"}],n=document.getElementById("destImg"),i=document.getElementById("destName"),r=document.getElementsByClassName("dest-desc"),o=document.getElementById("destDist"),a=document.getElementById("destTime");e.forEach((s=>{s.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("selectedDestOpt")})),s.classList.add("selectedDestOpt"),n.src=t[s.dataset.num].url,i.innerHTML=t[s.dataset.num].title,r[0].innerHTML=t[s.dataset.num].text,o.innerHTML=t[s.dataset.num].dist,a.innerHTML=t[s.dataset.num].time}))}))}()}(),2==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("crew");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m"><span class="fw-700">02</span>meat your crew</h5><section class="splide" aria-label="crew slider"><div class="splide__track"><ul class="splide__list"><li class="splide__slide"><img class="crewImg" src="./img/crew/image-douglas-hurley.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-mark-shuttleworth.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-victor-glover.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-anousheh-ansari.webp"></li></ul></div></section><section class="memberDesc | margin-block-500"><h5 id="crewRole" class="fs-h5 text-align-resp upper-case clr-accent2 ff-bell">commander</h5><h4 class="crewName | fs-h4 text-align-resp upper-case clr-accent ff-bell">douglas hurley</h4><p id="crewText" class="fs-bodytxt margin-bottom-650 text-align-resp clr-sec ff-bar long-txt">Douglas Gerald Hurley is an American engineer, former Marine Corps pilot and former NASA astronaut. He launched into space for the third time as commander of Crew Dragon Demo-2.</p></section>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("crewBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),new Ut(".splide").mount(),function(){const e=Array.from(document.querySelectorAll(".splide__slide")),t=new MutationObserver((function(e,t){for(let t=0;t<e.length;t++)if(e[t].target.attributes[0].textContent.includes("is-active")){i.innerHTML=n[e[t].target.ariaLabel[0]-1].role,r.innerHTML=n[e[t].target.ariaLabel[0]-1].name,o.innerHTML=n[e[t].target.ariaLabel[0]-1].text;break}}));e.forEach((e=>{t.observe(e,{attributes:!0})}));const n=[{role:"Commander",name:"Douglas Hurley",text:"Douglas Gerald Hurley is an American engineer, former Marine Corps pilot and former NASA astronaut. He launched into space for the third time as commander of Crew Dragon Demo-2."},{role:"Mission Specialist",name:"Mark Shuttleworth",text:"Mark Richard Shuttleworth is the founder and CEO of Canonical, the company behind the Linux-based Ubuntu operating system. Shuttleworth became the first South African to travel to space as a space tourist."},{role:"Pilot",name:"Victor Glover",text:"Pilot on the first operational flight of the SpaceX Crew Dragon to the International Space Station. Glover is a commander in the U.S. Navy where he pilots an F/A-18.He was a crew member of Expedition 64, and served as a station systems flight engineer. "},{role:"Flight Engineer",name:"Anousheh Ansari",text:"Anousheh Ansari is an Iranian American engineer and co-founder of Prodea Systems. Ansari was the fourth self-funded space tourist, the first self-funded woman to fly to the ISS, and the first Iranian in space. "}],i=document.getElementById("crewRole"),r=document.getElementsByClassName("crewName")[0],o=document.getElementById("crewText")}()}(),3==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("technology");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m" ><span class="fw-700">03</span>space launch 101</h5><div class="contToAvoidPadding | margin-block-500"><img class="launchL" draggable="false" id="techImg" src="./img/technology/image-launch-vehicle-landscape.jpg" alt="launch"></div><span class="techCont"><article class="termCont | flex"><ul class="techBtnLs | flex"><li class="selcetedBtn techBtn " data-num="0">1</li><li class="techBtn " data-num="1">2</li><li class="techBtn " data-num="2">3</li></ul><section class="techTextCont | flex"><h5 class="fs-h5 upper-case clr-sec ff-bar text-align-resp char-space-s">The terminology...</h5><h3 class="techName | fs-h4 upper-case clr-accent ff-bell text-align-resp">Launch vehicle</h3><p class="techDesc | long-txt fs-bodytxt text-align-resp ff-bar clr-sec margin-bottom-650">A launch vehicle or carrier rocket is a rocket-propelled vehicle used to carry a payload from Earth\'s surface to space, usually to Earth orbit or beyond. Our WEB-X carrier rocket is the most powerful in operation. Standing 150 metres tall, it\'s quite an awe-inspiring sight on the launch pad!</p></section></article></span>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("technologyBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),function(){const e=Array.from(document.querySelectorAll(".techBtn")),t=[{title:"Launch vehicle",text:"A launch vehicle or carrier rocket is a rocket-propelled vehicle used to carry a payload from Earth's surface to space, usually to Earth orbit or beyond. Our WEB-X carrier rocket is the most powerful in operation. Standing 150 metres tall, it's quite an awe-inspiring sight on the launch pad!",urlLs:"./img/technology/image-launch-vehicle-landscape.jpg",class:"launchL"},{title:"Spaceport",text:"A spaceport or cosmodrome is a site for launching (or receiving) spacecraft, by analogy to the seaport for ships or airport for aircraft. Based in the famous Cape Canaveral, our spaceport is ideally situated to take advantage of the Earth’s rotation for launch.",urlLs:"./img/technology/image-spaceport-landscape.jpg",class:"spaceportL"},{title:"Space capsule",text:"A space capsule is an often-crewed spacecraft that uses a blunt-body reentry capsule to reenter the Earth's atmosphere without wings. Our capsule is where you'll spend your time during the flight. It includes a space gym, cinema, and plenty of other activities to keep you entertained.",urlLs:"./img/technology/image-space-capsule-landscape.jpg",class:"capsuleL"}],n=document.getElementById("techImg"),i=document.getElementsByClassName("techName"),r=document.getElementsByClassName("techDesc");e.forEach((o=>{o.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("selcetedBtn")})),o.classList.add("selcetedBtn"),n.className="",n.classList.add(t[o.dataset.num].class),n.src=t[o.dataset.num].urlLs,i[0].innerHTML=t[o.dataset.num].title,r[0].innerHTML=t[o.dataset.num].text}))}))}()}()}))}))}(),e()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,