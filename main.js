/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";function e(){const e=document.getElementsByTagName("main"),t=document.getElementById("home");e[0].innerHTML='<section><h5 class="upper-case clr-sec ff-bar char-space-l fs-sh1 text-align-resp">So, you want to travel to space</h5><h1 class="upper-case clr-accent ff-bell fs-h1 text-align-resp">Space</h1><p class="clr-sec ff-bar fs-bodytxt text-align-resp long-txt">Let’s face it; if you want to go to space, you might as well genuinely go to outer space and not hover kind of on the edge of it. Well sit back, and relax because we’ll give you a truly out of this world experience!</p></section><button class="explore | upper-case clr-pr text-align-cent">Explore</button>',e[0].classList.add("home"),document.body.className="",document.body.classList.add("homeBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi")}function t(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var n="(prefers-reduced-motion: reduce)",i={CREATED:1,MOUNTED:2,IDLE:3,MOVING:4,SCROLLING:5,DRAGGING:6,DESTROYED:7};function r(e){e.length=0}function o(e,t,n){return Array.prototype.slice.call(e,t,n)}function a(e){return e.bind.apply(e,[null].concat(o(arguments,1)))}var s=setTimeout,c=function(){};function u(e){return requestAnimationFrame(e)}function l(e,t){return typeof t===e}function d(e){return!g(e)&&l("object",e)}var f=Array.isArray,p=a(l,"function"),m=a(l,"string"),h=a(l,"undefined");function g(e){return null===e}function v(e){try{return e instanceof(e.ownerDocument.defaultView||window).HTMLElement}catch(e){return!1}}function y(e){return f(e)?e:[e]}function b(e,t){y(e).forEach(t)}function w(e,t){return e.indexOf(t)>-1}function E(e,t){return e.push.apply(e,y(t)),e}function x(e,t,n){e&&b(t,(function(t){t&&e.classList[n?"add":"remove"](t)}))}function L(e,t){x(e,m(t)?t.split(" "):t,!0)}function S(e,t){b(t,e.appendChild.bind(e))}function k(e,t){b(e,(function(e){var n=(t||e).parentNode;n&&n.insertBefore(e,t)}))}function C(e,t){return v(e)&&(e.msMatchesSelector||e.matches).call(e,t)}function A(e,t){var n=e?o(e.children):[];return t?n.filter((function(e){return C(e,t)})):n}function M(e,t){return t?A(e,t)[0]:e.firstElementChild}var P=Object.keys;function _(e,t,n){return e&&(n?P(e).reverse():P(e)).forEach((function(n){"__proto__"!==n&&t(e[n],n)})),e}function T(e){return o(arguments,1).forEach((function(t){_(t,(function(n,i){e[i]=t[i]}))})),e}function D(e){return o(arguments,1).forEach((function(t){_(t,(function(t,n){f(t)?e[n]=t.slice():d(t)?e[n]=D({},d(e[n])?e[n]:{},t):e[n]=t}))})),e}function I(e,t){b(t||P(e),(function(t){delete e[t]}))}function B(e,t){b(e,(function(e){b(t,(function(t){e&&e.removeAttribute(t)}))}))}function N(e,t,n){d(t)?_(t,(function(t,n){N(e,n,t)})):b(e,(function(e){g(n)||""===n?B(e,t):e.setAttribute(t,String(n))}))}function O(e,t,n){var i=document.createElement(e);return t&&(m(t)?L(i,t):N(i,t)),n&&S(n,i),i}function z(e,t,n){if(h(n))return getComputedStyle(e)[t];g(n)||(e.style[t]=""+n)}function H(e,t){z(e,"display",t)}function j(e){e.setActive&&e.setActive()||e.focus({preventScroll:!0})}function F(e,t){return e.getAttribute(t)}function G(e,t){return e&&e.classList.contains(t)}function R(e){return e.getBoundingClientRect()}function W(e){b(e,(function(e){e&&e.parentNode&&e.parentNode.removeChild(e)}))}function X(e){return M((new DOMParser).parseFromString(e,"text/html").body)}function q(e,t){e.preventDefault(),t&&(e.stopPropagation(),e.stopImmediatePropagation())}function U(e,t){return e&&e.querySelector(t)}function Y(e,t){return t?o(e.querySelectorAll(t)):[]}function J(e,t){x(e,t,!1)}function K(e){return e.timeStamp}function V(e){return m(e)?e:e?e+"px":""}var Q="splide",Z="data-"+Q;function $(e,t){if(!e)throw new Error("["+Q+"] "+(t||""))}var ee=Math.min,te=Math.max,ne=Math.floor,ie=Math.ceil,re=Math.abs;function oe(e,t,n){return re(e-t)<n}function ae(e,t,n,i){var r=ee(t,n),o=te(t,n);return i?r<e&&e<o:r<=e&&e<=o}function se(e,t,n){var i=ee(t,n),r=te(t,n);return ee(te(i,e),r)}function ce(e){return+(e>0)-+(e<0)}function ue(e,t){return b(t,(function(t){e=e.replace("%s",""+t)})),e}function le(e){return e<10?"0"+e:""+e}var de={};function fe(){var e=[];function t(e,t,n){b(e,(function(e){e&&b(t,(function(t){t.split(" ").forEach((function(t){var i=t.split(".");n(e,i[0],i[1])}))}))}))}return{bind:function(n,i,r,o){t(n,i,(function(t,n,i){var a="addEventListener"in t,s=a?t.removeEventListener.bind(t,n,r,o):t.removeListener.bind(t,r);a?t.addEventListener(n,r,o):t.addListener(r),e.push([t,n,i,r,s])}))},unbind:function(n,i,r){t(n,i,(function(t,n,i){e=e.filter((function(e){return!!(e[0]!==t||e[1]!==n||e[2]!==i||r&&e[3]!==r)||(e[4](),!1)}))}))},dispatch:function(e,t,n){var i;return"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:!0,detail:n}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,!0,!1,n),e.dispatchEvent(i),i},destroy:function(){e.forEach((function(e){e[4]()})),r(e)}}}var pe="mounted",me="ready",he="move",ge="moved",ve="click",ye="refresh",be="updated",we="resize",Ee="resized",xe="scroll",Le="scrolled",Se="destroy",ke="navigation:mounted",Ce="autoplay:play",Ae="autoplay:pause",Me="lazyload:loaded",Pe="ei";function _e(e){var t=e?e.event.bus:document.createDocumentFragment(),n=fe();return e&&e.event.on(Se,n.destroy),T(n,{bus:t,on:function(e,i){n.bind(t,y(e).join(" "),(function(e){i.apply(i,f(e.detail)?e.detail:[])}))},off:a(n.unbind,t),emit:function(e){n.dispatch(t,e,o(arguments,1))}})}function Te(e,t,n,i){var r,o,a=Date.now,s=0,c=!0,l=0;function d(){if(!c){if(s=e?ee((a()-r)/e,1):1,n&&n(s),s>=1&&(t(),r=a(),i&&++l>=i))return f();o=u(d)}}function f(){c=!0}function p(){o&&cancelAnimationFrame(o),s=0,o=0,c=!0}return{start:function(t){t||p(),r=a()-(t?s*e:0),c=!1,o=u(d)},rewind:function(){r=a(),s=0,n&&n(s)},pause:f,cancel:p,set:function(t){e=t},isPaused:function(){return c}}}var De="Arrow",Ie=De+"Left",Be=De+"Right",Ne=De+"Up",Oe=De+"Down",ze="ttb",He={width:["height"],left:["top","right"],right:["bottom","left"],x:["y"],X:["Y"],Y:["X"],ArrowLeft:[Ne,Be],ArrowRight:[Oe,Ie]};var je="role",Fe="tabindex",Ge="aria-",Re=Ge+"controls",We=Ge+"current",Xe=Ge+"selected",qe=Ge+"label",Ue=Ge+"labelledby",Ye=Ge+"hidden",Je=Ge+"orientation",Ke=Ge+"roledescription",Ve=Ge+"live",Qe=Ge+"busy",Ze=Ge+"atomic",$e=[je,Fe,"disabled",Re,We,qe,Ue,Ye,Je,Ke],et=Q+"__",tt="is-",nt=Q,it=et+"track",rt=et+"list",ot=et+"slide",at=ot+"--clone",st=ot+"__container",ct=et+"arrows",ut=et+"arrow",lt=ut+"--prev",dt=ut+"--next",ft=et+"pagination",pt=ft+"__page",mt=et+"progress__bar",ht=et+"toggle",gt=et+"sr",vt=tt+"initialized",yt=tt+"active",bt=tt+"prev",wt=tt+"next",Et=tt+"visible",xt=tt+"loading",Lt=tt+"focus-in",St=tt+"overflow",kt=[yt,Et,bt,wt,xt,Lt,St],Ct={slide:ot,clone:at,arrows:ct,arrow:ut,prev:lt,next:dt,pagination:ft,page:pt,spinner:et+"spinner"},At="touchstart mousedown",Mt="touchmove mousemove",Pt="touchend touchcancel mouseup click",_t="slide",Tt="loop",Dt="fade";var It=Z+"-interval",Bt={passive:!1,capture:!0},Nt={Spacebar:" ",Right:Be,Left:Ie,Up:Ne,Down:Oe};function Ot(e){return e=m(e)?e:e.key,Nt[e]||e}var zt="keydown",Ht=Z+"-lazy",jt=Ht+"-srcset",Ft="["+Ht+"], ["+jt+"]",Gt=[" ","Enter"],Rt=Object.freeze({__proto__:null,Media:function(e,t,i){var r=e.state,o=i.breakpoints||{},a=i.reducedMotion||{},s=fe(),c=[];function u(e){e&&s.destroy()}function l(e,t){var n=matchMedia(t);s.bind(n,"change",d),c.push([e,n])}function d(){var t=r.is(7),n=i.direction,o=c.reduce((function(e,t){return D(e,t[1].matches?t[0]:{})}),{});I(i),f(o),i.destroy?e.destroy("completely"===i.destroy):t?(u(!0),e.mount()):n!==i.direction&&e.refresh()}function f(t,n,o){D(i,t),n&&D(Object.getPrototypeOf(i),t),!o&&r.is(1)||e.emit(be,i)}return{setup:function(){var e="min"===i.mediaQuery;P(o).sort((function(t,n){return e?+t-+n:+n-+t})).forEach((function(t){l(o[t],"("+(e?"min":"max")+"-width:"+t+"px)")})),l(a,n),d()},destroy:u,reduce:function(e){matchMedia(n).matches&&(e?D(i,a):I(i,P(a)))},set:f}},Direction:function(e,t,n){return{resolve:function(e,t,i){var r="rtl"!==(i=i||n.direction)||t?i===ze?0:-1:1;return He[e]&&He[e][r]||e.replace(/width|left|right/i,(function(e,t){var n=He[e.toLowerCase()][r]||e;return t>0?n.charAt(0).toUpperCase()+n.slice(1):n}))},orient:function(e){return e*("rtl"===n.direction?1:-1)}}},Elements:function(e,t,n){var i,o,a,s=_e(e),c=s.on,u=s.bind,l=e.root,d=n.i18n,f={},m=[],h=[],g=[];function v(){var e,t,r;i=w("."+it),o=M(i,"."+rt),$(i&&o,"A track/list element is missing."),E(m,A(o,"."+ot+":not(."+at+")")),_({arrows:ct,pagination:ft,prev:lt,next:dt,bar:mt,toggle:ht},(function(e,t){f[t]=w("."+e)})),T(f,{root:l,track:i,list:o,slides:m}),t=l.id||""+(e=Q)+le(de[e]=(de[e]||0)+1),r=n.role,l.id=t,i.id=i.id||t+"-track",o.id=o.id||t+"-list",!F(l,je)&&"SECTION"!==l.tagName&&r&&N(l,je,r),N(l,Ke,d.carousel),N(o,je,"presentation"),b()}function y(e){var t=$e.concat("style");r(m),J(l,h),J(i,g),B([i,o],t),B(l,e?t:["style",Ke])}function b(){J(l,h),J(i,g),h=S(nt),g=S(it),L(l,h),L(i,g),N(l,qe,n.label),N(l,Ue,n.labelledby)}function w(e){var t=U(l,e);return t&&function(e,t){if(p(e.closest))return e.closest(t);for(var n=e;n&&1===n.nodeType&&!C(n,t);)n=n.parentElement;return n}(t,"."+nt)===l?t:void 0}function S(e){return[e+"--"+n.type,e+"--"+n.direction,n.drag&&e+"--draggable",n.isNavigation&&e+"--nav",e===nt&&yt]}return T(f,{setup:v,mount:function(){c(ye,y),c(ye,v),c(be,b),u(document,At+" keydown",(function(e){a="keydown"===e.type}),{capture:!0}),u(l,"focusin",(function(){x(l,Lt,!!a)}))},destroy:y})},Slides:function(e,t,n){var i=_e(e),o=i.on,s=i.emit,c=i.bind,u=t.Elements,l=u.slides,d=u.list,f=[];function h(){l.forEach((function(e,t){E(e,t,-1)}))}function g(){P((function(e){e.destroy()})),r(f)}function E(t,n,i){var r=function(e,t,n,i){var r,o=_e(e),s=o.on,c=o.emit,u=o.bind,l=e.Components,d=e.root,f=e.options,p=f.isNavigation,m=f.updateOnMove,h=f.i18n,g=f.pagination,v=f.slideFocus,y=l.Direction.resolve,b=F(i,"style"),w=F(i,qe),E=n>-1,L=M(i,"."+st);function S(){var r=e.splides.map((function(e){var n=e.splide.Components.Slides.getAt(t);return n?n.slide.id:""})).join(" ");N(i,qe,ue(h.slideX,(E?n:t)+1)),N(i,Re,r),N(i,je,v?"button":""),v&&B(i,Ke)}function k(){r||C()}function C(){if(!r){var n=e.index;(o=A())!==G(i,yt)&&(x(i,yt,o),N(i,We,p&&o||""),c(o?"active":"inactive",P)),function(){var t=function(){if(e.is(Dt))return A();var t=R(l.Elements.track),n=R(i),r=y("left",!0),o=y("right",!0);return ne(t[r])<=ie(n[r])&&ne(n[o])<=ie(t[o])}(),n=!t&&(!A()||E);if(e.state.is([4,5])||N(i,Ye,n||""),N(Y(i,f.focusableNodes||""),Fe,n?-1:""),v&&N(i,Fe,n?-1:0),t!==G(i,Et)&&(x(i,Et,t),c(t?"visible":"hidden",P)),!t&&document.activeElement===i){var r=l.Slides.getAt(e.index);r&&j(r.slide)}}(),x(i,bt,t===n-1),x(i,wt,t===n+1)}var o}function A(){var i=e.index;return i===t||f.cloneStatus&&i===n}var P={index:t,slideIndex:n,slide:i,container:L,isClone:E,mount:function(){E||(i.id=d.id+"-slide"+le(t+1),N(i,je,g?"tabpanel":"group"),N(i,Ke,h.slide),N(i,qe,w||ue(h.slideLabel,[t+1,e.length]))),u(i,"click",a(c,ve,P)),u(i,"keydown",a(c,"sk",P)),s([ge,"sh",Le],C),s(ke,S),m&&s(he,k)},destroy:function(){r=!0,o.destroy(),J(i,kt),B(i,$e),N(i,"style",b),N(i,qe,w||"")},update:C,style:function(e,t,n){z(n&&L||i,e,t)},isWithin:function(n,i){var r=re(n-t);return E||!f.rewind&&!e.is(Tt)||(r=ee(r,e.length-r)),r<=i}};return P}(e,n,i,t);r.mount(),f.push(r),f.sort((function(e,t){return e.index-t.index}))}function A(e){return e?_((function(e){return!e.isClone})):f}function P(e,t){A(t).forEach(e)}function _(e){return f.filter(p(e)?e:function(t){return m(e)?C(t.slide,e):w(y(e),t.index)})}return{mount:function(){h(),o(ye,g),o(ye,h)},destroy:g,update:function(){P((function(e){e.update()}))},register:E,get:A,getIn:function(e){var i=t.Controller,r=i.toIndex(e),o=i.hasFocus()?1:n.perPage;return _((function(e){return ae(e.index,r,r+o-1)}))},getAt:function(e){return _(e)[0]},add:function(e,t){b(e,(function(e){if(m(e)&&(e=X(e)),v(e)){var i=l[t];i?k(e,i):S(d,e),L(e,n.classes.slide),r=e,o=a(s,we),u=Y(r,"img"),(f=u.length)?u.forEach((function(e){c(e,"load error",(function(){--f||o()}))})):o()}var r,o,u,f})),s(ye)},remove:function(e){W(_(e).map((function(e){return e.slide}))),s(ye)},forEach:P,filter:_,style:function(e,t,n){P((function(i){i.style(e,t,n)}))},getLength:function(e){return e?l.length:f.length},isEnough:function(){return f.length>n.perPage}}},Layout:function(e,t,n){var i,r,o,s=_e(e),c=s.on,u=s.bind,l=s.emit,f=t.Slides,p=t.Direction.resolve,m=t.Elements,h=m.root,g=m.track,v=m.list,y=f.getAt,b=f.style;function w(){i=n.direction===ze,z(h,"maxWidth",V(n.width)),z(g,p("paddingLeft"),L(!1)),z(g,p("paddingRight"),L(!0)),E(!0)}function E(e){var t,a=R(h);(e||r.width!==a.width||r.height!==a.height)&&(z(g,"height",(t="",i&&($(t=S(),"height or heightRatio is missing."),t="calc("+t+" - "+L(!1)+" - "+L(!0)+")"),t)),b(p("marginRight"),V(n.gap)),b("width",n.autoWidth?null:V(n.fixedWidth)||(i?"":k())),b("height",V(n.fixedHeight)||(i?n.autoHeight?null:k():S()),!0),r=a,l(Ee),o!==(o=T())&&(x(h,St,o),l("overflow",o)))}function L(e){var t=n.padding,i=p(e?"right":"left");return t&&V(t[i]||(d(t)?0:t))||"0px"}function S(){return V(n.height||R(v).width*n.heightRatio)}function k(){var e=V(n.gap);return"calc((100%"+(e&&" + "+e)+")/"+(n.perPage||1)+(e&&" - "+e)+")"}function C(){return R(v)[p("width")]}function A(e,t){var n=y(e||0);return n?R(n.slide)[p("width")]+(t?0:_()):0}function M(e,t){var n=y(e);if(n){var i=R(n.slide)[p("right")],r=R(v)[p("left")];return re(i-r)+(t?0:_())}return 0}function P(t){return M(e.length-1)-M(0)+A(0,t)}function _(){var e=y(0);return e&&parseFloat(z(e.slide,p("marginRight")))||0}function T(){return e.is(Dt)||P(!0)>C()}return{mount:function(){var e,t;w(),u(window,"resize load",(e=a(l,we),t=Te(0,e,null,1),function(){t.isPaused()&&t.start()})),c([be,ye],w),c(we,E)},resize:E,listSize:C,slideSize:A,sliderSize:P,totalSize:M,getPadding:function(e){return parseFloat(z(g,p("padding"+(e?"Right":"Left"))))||0},isOverflow:T}},Clones:function(e,t,n){var i,o=_e(e),a=o.on,s=t.Elements,c=t.Slides,u=t.Direction.resolve,l=[];function d(){a(ye,f),a([be,we],m),(i=g())&&(function(t){var i=c.get().slice(),r=i.length;if(r){for(;i.length<t;)E(i,i);E(i.slice(-t),i.slice(0,t)).forEach((function(o,a){var u=a<t,d=function(t,i){var r=t.cloneNode(!0);return L(r,n.classes.clone),r.id=e.root.id+"-clone"+le(i+1),r}(o.slide,a);u?k(d,i[0].slide):S(s.list,d),E(l,d),c.register(d,a-t+(u?0:r),o.index)}))}}(i),t.Layout.resize(!0))}function f(){p(),d()}function p(){W(l),r(l),o.destroy()}function m(){var e=g();i!==e&&(i<e||!e)&&o.emit(ye)}function g(){var i=n.clones;if(e.is(Tt)){if(h(i)){var r=n[u("fixedWidth")]&&t.Layout.slideSize(0);i=r&&ie(R(s.track)[u("width")]/r)||n[u("autoWidth")]&&e.length||2*n.perPage}}else i=0;return i}return{mount:d,destroy:p}},Move:function(e,t,n){var i,r=_e(e),o=r.on,a=r.emit,s=e.state.set,c=t.Layout,u=c.slideSize,l=c.getPadding,d=c.totalSize,f=c.listSize,p=c.sliderSize,m=t.Direction,g=m.resolve,v=m.orient,y=t.Elements,b=y.list,w=y.track;function E(){t.Controller.isBusy()||(t.Scroll.cancel(),x(e.index),t.Slides.update())}function x(e){L(A(e,!0))}function L(n,i){if(!e.is(Dt)){var r=i?n:function(n){if(e.is(Tt)){var i=C(n),r=i>t.Controller.getEnd();(i<0||r)&&(n=S(n,r))}return n}(n);z(b,"transform","translate"+g("X")+"("+r+"px)"),n!==r&&a("sh")}}function S(e,t){var n=e-P(t),i=p();return e-v(i*(ie(re(n)/i)||1))*(t?1:-1)}function k(){L(M(),!0),i.cancel()}function C(e){for(var n=t.Slides.get(),i=0,r=1/0,o=0;o<n.length;o++){var a=n[o].index,s=re(A(a,!0)-e);if(!(s<=r))break;r=s,i=a}return i}function A(t,i){var r=v(d(t-1)-function(e){var t=n.focus;return"center"===t?(f()-u(e,!0))/2:+t*u(e)||0}(t));return i?function(t){return n.trimSpace&&e.is(_t)&&(t=se(t,0,v(p(!0)-f()))),t}(r):r}function M(){var e=g("left");return R(b)[e]-R(w)[e]+v(l(!1))}function P(e){return A(e?t.Controller.getEnd():0,!!n.trimSpace)}return{mount:function(){i=t.Transition,o([pe,Ee,be,ye],E)},move:function(e,t,n,r){var o,c;e!==t&&(o=e>n,c=v(S(M(),o)),o?c>=0:c<=b[g("scrollWidth")]-R(w)[g("width")])&&(k(),L(S(M(),e>n),!0)),s(4),a(he,t,n,e),i.start(t,(function(){s(3),a(ge,t,n,e),r&&r()}))},jump:x,translate:L,shift:S,cancel:k,toIndex:C,toPosition:A,getPosition:M,getLimit:P,exceededLimit:function(e,t){t=h(t)?M():t;var n=!0!==e&&v(t)<v(P(!1)),i=!1!==e&&v(t)>v(P(!0));return n||i},reposition:E}},Controller:function(e,t,n){var i,r,o,s,c=_e(e),u=c.on,l=c.emit,d=t.Move,f=d.getPosition,p=d.getLimit,g=d.toPosition,v=t.Slides,y=v.isEnough,b=v.getLength,w=n.omitEnd,E=e.is(Tt),x=e.is(_t),L=a(P,!1),S=a(P,!0),k=n.start||0,C=k;function A(){r=b(!0),o=n.perMove,s=n.perPage,i=D();var e=se(k,0,w?i:r-1);e!==k&&(k=e,d.reposition())}function M(){i!==D()&&l(Pe)}function P(e,t){var n=o||(O()?1:s),r=_(k+n*(e?-1:1),k,!(o||O()));return-1===r&&x&&!oe(f(),p(!e),1)?e?0:i:t?r:T(r)}function _(t,a,c){if(y()||O()){var u=function(t){if(x&&"move"===n.trimSpace&&t!==k)for(var i=f();i===g(t,!0)&&ae(t,0,e.length-1,!n.rewind);)t<k?--t:++t;return t}(t);u!==t&&(a=t,t=u,c=!1),t<0||t>i?t=o||!ae(0,t,a,!0)&&!ae(i,a,t,!0)?E?c?t<0?-(r%s||s):r:t:n.rewind?t<0?i:0:-1:I(B(t)):c&&t!==a&&(t=I(B(a)+(t<a?-1:1)))}else t=-1;return t}function T(e){return E?(e+r)%r||0:e}function D(){for(var e=r-(O()||E&&o?1:s);w&&e-- >0;)if(g(r-1,!0)!==g(e,!0)){e++;break}return se(e,0,r-1)}function I(e){return se(O()?e:s*e,0,i)}function B(e){return O()?ee(e,i):ne((e>=i?r-1:e)/s)}function N(e){e!==k&&(C=k,k=e)}function O(){return!h(n.focus)||n.isNavigation}function z(){return e.state.is([4,5])&&!!n.waitForTransition}return{mount:function(){A(),u([be,ye,Pe],A),u(Ee,M)},go:function(e,t,n){if(!z()){var r=function(e){var t=k;if(m(e)){var n=e.match(/([+\-<>])(\d+)?/)||[],r=n[1],o=n[2];"+"===r||"-"===r?t=_(k+ +(""+r+(+o||1)),k):">"===r?t=o?I(+o):L(!0):"<"===r&&(t=S(!0))}else t=E?e:se(e,0,i);return t}(e),o=T(r);o>-1&&(t||o!==k)&&(N(o),d.move(r,o,C,n))}},scroll:function(e,n,r,o){t.Scroll.scroll(e,n,r,(function(){var e=T(d.toIndex(f()));N(w?ee(e,i):e),o&&o()}))},getNext:L,getPrev:S,getAdjacent:P,getEnd:D,setIndex:N,getIndex:function(e){return e?C:k},toIndex:I,toPage:B,toDest:function(e){var t=d.toIndex(e);return x?se(t,0,i):t},hasFocus:O,isBusy:z}},Arrows:function(e,t,n){var i,r,o=_e(e),s=o.on,c=o.bind,u=o.emit,l=n.classes,d=n.i18n,f=t.Elements,p=t.Controller,m=f.arrows,h=f.track,g=m,v=f.prev,y=f.next,b={};function w(){var e;!(e=n.arrows)||v&&y||(g=m||O("div",l.arrows),v=A(!0),y=A(!1),i=!0,S(g,[v,y]),!m&&k(g,h)),v&&y&&(T(b,{prev:v,next:y}),H(g,e?"":"none"),L(g,r=ct+"--"+n.direction),e&&(s([pe,ge,ye,Le,Pe],M),c(y,"click",a(C,">")),c(v,"click",a(C,"<")),M(),N([v,y],Re,h.id),u("arrows:mounted",v,y))),s(be,E)}function E(){x(),w()}function x(){o.destroy(),J(g,r),i?(W(m?[v,y]:g),v=y=null):B([v,y],$e)}function C(e){p.go(e,!0)}function A(e){return X('<button class="'+l.arrow+" "+(e?l.prev:l.next)+'" type="button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40" width="40" height="40" focusable="false"><path d="'+(n.arrowPath||"m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z")+'" />')}function M(){if(v&&y){var t=e.index,n=p.getPrev(),i=p.getNext(),r=n>-1&&t<n?d.last:d.prev,o=i>-1&&t>i?d.first:d.next;v.disabled=n<0,y.disabled=i<0,N(v,qe,r),N(y,qe,o),u("arrows:updated",v,y,n,i)}}return{arrows:b,mount:w,destroy:x,update:M}},Autoplay:function(e,t,n){var i,r,o=_e(e),a=o.on,s=o.bind,c=o.emit,u=Te(n.interval,e.go.bind(e,">"),(function(e){var t=d.bar;t&&z(t,"width",100*e+"%"),c("autoplay:playing",e)})),l=u.isPaused,d=t.Elements,f=t.Elements,p=f.root,m=f.toggle,h=n.autoplay,g="pause"===h;function v(){l()&&t.Slides.isEnough()&&(u.start(!n.resetProgress),r=i=g=!1,w(),c(Ce))}function y(e){void 0===e&&(e=!0),g=!!e,w(),l()||(u.pause(),c(Ae))}function b(){g||(i||r?y(!1):v())}function w(){m&&(x(m,yt,!g),N(m,qe,n.i18n[g?"play":"pause"]))}function E(e){var i=t.Slides.getAt(e);u.set(i&&+F(i.slide,It)||n.interval)}return{mount:function(){h&&(n.pauseOnHover&&s(p,"mouseenter mouseleave",(function(e){i="mouseenter"===e.type,b()})),n.pauseOnFocus&&s(p,"focusin focusout",(function(e){r="focusin"===e.type,b()})),m&&s(m,"click",(function(){g?v():y(!0)})),a([he,xe,ye],u.rewind),a(he,E),m&&N(m,Re,d.track.id),g||v(),w())},destroy:u.cancel,play:v,pause:y,isPaused:l}},Cover:function(e,t,n){var i=_e(e).on;function r(e){t.Slides.forEach((function(t){var n=M(t.container||t.slide,"img");n&&n.src&&o(e,n,t)}))}function o(e,t,n){n.style("background",e?'center/cover no-repeat url("'+t.src+'")':"",!0),H(t,e?"none":"")}return{mount:function(){n.cover&&(i(Me,a(o,!0)),i([pe,be,ye],a(r,!0)))},destroy:a(r,!1)}},Scroll:function(e,t,n){var i,r,o=_e(e),s=o.on,c=o.emit,u=e.state.set,l=t.Move,d=l.getPosition,f=l.getLimit,p=l.exceededLimit,m=l.translate,h=e.is(_t),g=1;function v(e,n,o,s,f){var m=d();if(w(),o&&(!h||!p())){var v=t.Layout.sliderSize(),E=ce(e)*v*ne(re(e)/v)||0;e=l.toPosition(t.Controller.toDest(e%v))+E}var x=oe(m,e,1);g=1,n=x?0:n||te(re(e-m)/1.5,800),r=s,i=Te(n,y,a(b,m,e,f),1),u(5),c(xe),i.start()}function y(){u(3),r&&r(),c(Le)}function b(e,t,i,o){var a,s,c=d(),u=(e+(t-e)*(a=o,(s=n.easingFunc)?s(a):1-Math.pow(1-a,4))-c)*g;m(c+u),h&&!i&&p()&&(g*=.6,re(u)<10&&v(f(p(!0)),600,!1,r,!0))}function w(){i&&i.cancel()}function E(){i&&!i.isPaused()&&(w(),y())}return{mount:function(){s(he,w),s([be,ye],E)},destroy:w,scroll:v,cancel:E}},Drag:function(e,t,n){var i,r,o,a,s,u,l,f,p=_e(e),m=p.on,h=p.emit,g=p.bind,v=p.unbind,y=e.state,b=t.Move,w=t.Scroll,E=t.Controller,x=t.Elements.track,L=t.Media.reduce,S=t.Direction,k=S.resolve,A=S.orient,M=b.getPosition,P=b.exceededLimit,_=!1;function T(){var e=n.drag;R(!e),a="free"===e}function D(e){if(u=!1,!l){var t=G(e);i=e.target,r=n.noDrag,C(i,"."+pt+", ."+ut)||r&&C(i,r)||!t&&e.button||(E.isBusy()?q(e,!0):(f=t?x:window,s=y.is([4,5]),o=null,g(f,Mt,I,Bt),g(f,Pt,B,Bt),b.cancel(),w.cancel(),O(e)))}var i,r}function I(t){if(y.is(6)||(y.set(6),h("drag")),t.cancelable)if(s){b.translate(i+z(t)/(_&&e.is(_t)?5:1));var r=H(t)>200,o=_!==(_=P());(r||o)&&O(t),u=!0,h("dragging"),q(t)}else(function(e){return re(z(e))>re(z(e,!0))})(t)&&(s=function(e){var t=n.dragMinThreshold,i=d(t),r=i&&t.mouse||0,o=(i?t.touch:+t)||10;return re(z(e))>(G(e)?o:r)}(t),q(t))}function B(i){y.is(6)&&(y.set(3),h("dragged")),s&&(function(i){var r=function(t){if(e.is(Tt)||!_){var n=H(t);if(n&&n<200)return z(t)/n}return 0}(i),o=function(e){return M()+ce(e)*ee(re(e)*(n.flickPower||600),a?1/0:t.Layout.listSize()*(n.flickMaxPages||1))}(r),s=n.rewind&&n.rewindByDrag;L(!1),a?E.scroll(o,0,n.snap):e.is(Dt)?E.go(A(ce(r))<0?s?"<":"-":s?">":"+"):e.is(_t)&&_&&s?E.go(P(!0)?">":"<"):E.go(E.toDest(o),!0),L(!0)}(i),q(i)),v(f,Mt,I),v(f,Pt,B),s=!1}function N(e){!l&&u&&q(e,!0)}function O(e){o=r,r=e,i=M()}function z(e,t){return F(e,t)-F(j(e),t)}function H(e){return K(e)-K(j(e))}function j(e){return r===e&&o||r}function F(e,t){return(G(e)?e.changedTouches[0]:e)["page"+k(t?"Y":"X")]}function G(e){return"undefined"!=typeof TouchEvent&&e instanceof TouchEvent}function R(e){l=e}return{mount:function(){g(x,Mt,c,Bt),g(x,Pt,c,Bt),g(x,At,D,Bt),g(x,"click",N,{capture:!0}),g(x,"dragstart",q),m([pe,be],T)},disable:R,isDragging:function(){return s}}},Keyboard:function(e,t,n){var i,r,o=_e(e),a=o.on,c=o.bind,u=o.unbind,l=e.root,d=t.Direction.resolve;function f(){var e=n.keyboard;e&&(i="global"===e?window:l,c(i,zt,h))}function p(){u(i,zt)}function m(){var e=r;r=!0,s((function(){r=e}))}function h(t){if(!r){var n=Ot(t);n===d(Ie)?e.go("<"):n===d(Be)&&e.go(">")}}return{mount:function(){f(),a(be,p),a(be,f),a(he,m)},destroy:p,disable:function(e){r=e}}},LazyLoad:function(e,t,n){var i=_e(e),o=i.on,s=i.off,c=i.bind,u=i.emit,l="sequential"===n.lazyLoad,d=[ge,Le],f=[];function p(){r(f),t.Slides.forEach((function(e){Y(e.slide,Ft).forEach((function(t){var i=F(t,Ht),r=F(t,jt);if(i!==t.src||r!==t.srcset){var o=n.classes.spinner,a=t.parentElement,s=M(a,"."+o)||O("span",o,a);f.push([t,e,s]),t.src||H(t,"none")}}))})),l?v():(s(d),o(d,m),m())}function m(){(f=f.filter((function(t){var i=n.perPage*((n.preloadPages||1)+1)-1;return!t[1].isWithin(e.index,i)||h(t)}))).length||s(d)}function h(e){var t=e[0];L(e[1].slide,xt),c(t,"load error",a(g,e)),N(t,"src",F(t,Ht)),N(t,"srcset",F(t,jt)),B(t,Ht),B(t,jt)}function g(e,t){var n=e[0],i=e[1];J(i.slide,xt),"error"!==t.type&&(W(e[2]),H(n,""),u(Me,n,i),u(we)),l&&v()}function v(){f.length&&h(f.shift())}return{mount:function(){n.lazyLoad&&(p(),o(ye,p))},destroy:a(r,f),check:m}},Pagination:function(e,t,n){var i,s,c=_e(e),u=c.on,l=c.emit,d=c.bind,f=t.Slides,p=t.Elements,m=t.Controller,h=m.hasFocus,g=m.getIndex,v=m.go,y=t.Direction.resolve,b=p.pagination,w=[];function E(){i&&(W(b?o(i.children):i),J(i,s),r(w),i=null),c.destroy()}function x(e){v(">"+e,!0)}function S(e,t){var n=w.length,i=Ot(t),r=k(),o=-1;i===y(Be,!1,r)?o=++e%n:i===y(Ie,!1,r)?o=(--e+n)%n:"Home"===i?o=0:"End"===i&&(o=n-1);var a=w[o];a&&(j(a.button),v(">"+o),q(t,!0))}function k(){return n.paginationDirection||n.direction}function C(e){return w[m.toPage(e)]}function A(){var e=C(g(!0)),t=C(g());if(e){var n=e.button;J(n,yt),B(n,Xe),N(n,Fe,-1)}if(t){var r=t.button;L(r,yt),N(r,Xe,!0),N(r,Fe,"")}l("pagination:updated",{list:i,items:w},e,t)}return{items:w,mount:function t(){E(),u([be,ye,Pe],t);var r=n.pagination;b&&H(b,r?"":"none"),r&&(u([he,xe,Le],A),function(){var t=e.length,r=n.classes,o=n.i18n,c=n.perPage,u=h()?m.getEnd()+1:ie(t/c);L(i=b||O("ul",r.pagination,p.track.parentElement),s=ft+"--"+k()),N(i,je,"tablist"),N(i,qe,o.select),N(i,Je,k()===ze?"vertical":"");for(var l=0;l<u;l++){var g=O("li",null,i),v=O("button",{class:r.page,type:"button"},g),y=f.getIn(l).map((function(e){return e.slide.id})),E=!h()&&c>1?o.pageX:o.slideX;d(v,"click",a(x,l)),n.paginationKeyboard&&d(v,"keydown",a(S,l)),N(g,je,"presentation"),N(v,je,"tab"),N(v,Re,y.join(" ")),N(v,qe,ue(E,l+1)),N(v,Fe,-1),w.push({li:g,button:v,page:l})}}(),A(),l("pagination:mounted",{list:i,items:w},C(e.index)))},destroy:E,getAt:C,update:A}},Sync:function(e,t,n){var i=n.isNavigation,o=n.slideFocus,s=[];function c(){var t,n;e.splides.forEach((function(t){t.isParent||(l(e,t.splide),l(t.splide,e))})),i&&((n=(t=_e(e)).on)(ve,f),n("sk",p),n([pe,be],d),s.push(t),t.emit(ke,e.splides))}function u(){s.forEach((function(e){e.destroy()})),r(s)}function l(e,t){var n=_e(e);n.on(he,(function(e,n,i){t.go(t.is(Tt)?i:e)})),s.push(n)}function d(){N(t.Elements.list,Je,n.direction===ze?"vertical":"")}function f(t){e.go(t.index)}function p(e,t){w(Gt,Ot(t))&&(f(e),q(t))}return{setup:a(t.Media.set,{slideFocus:h(o)?i:o},!0),mount:c,destroy:u,remount:function(){u(),c()}}},Wheel:function(e,t,n){var i=_e(e).bind,r=0;function o(i){if(i.cancelable){var o=i.deltaY,a=o<0,s=K(i),c=n.wheelMinThreshold||0,u=n.wheelSleep||0;re(o)>c&&s-r>u&&(e.go(a?"<":">"),r=s),function(i){return!n.releaseWheel||e.state.is(4)||-1!==t.Controller.getAdjacent(i)}(a)&&q(i)}}return{mount:function(){n.wheel&&i(t.Elements.track,"wheel",o,Bt)}}},Live:function(e,t,n){var i=_e(e).on,r=t.Elements.track,o=n.live&&!n.isNavigation,s=O("span",gt),c=Te(90,a(u,!1));function u(e){N(r,Qe,e),e?(S(r,s),c.start()):(W(s),c.cancel())}function l(e){o&&N(r,Ve,e?"off":"polite")}return{mount:function(){o&&(l(!t.Autoplay.isPaused()),N(r,Ze,!0),s.textContent="…",i(Ce,a(l,!0)),i(Ae,a(l,!1)),i([ge,Le],a(u,!0)))},disable:l,destroy:function(){B(r,[Ve,Ze,Qe]),W(s)}}}}),Wt={type:"slide",role:"region",speed:400,perPage:1,cloneStatus:!0,arrows:!0,pagination:!0,paginationKeyboard:!0,interval:5e3,pauseOnHover:!0,pauseOnFocus:!0,resetProgress:!0,easing:"cubic-bezier(0.25, 1, 0.5, 1)",drag:!0,direction:"ltr",trimSpace:!0,focusableNodes:"a, button, textarea, input, select, iframe",live:!0,classes:Ct,i18n:{prev:"Previous slide",next:"Next slide",first:"Go to first slide",last:"Go to last slide",slideX:"Go to slide %s",pageX:"Go to page %s",play:"Start autoplay",pause:"Pause autoplay",carousel:"carousel",slide:"slide",select:"Select a slide to show",slideLabel:"%s of %s"},reducedMotion:{speed:0,rewindSpeed:0,autoplay:"pause"}};function Xt(e,t,n){var i=t.Slides;function r(){i.forEach((function(e){e.style("transform","translateX(-"+100*e.index+"%)")}))}return{mount:function(){_e(e).on([pe,ye],r)},start:function(e,t){i.style("transition","opacity "+n.speed+"ms "+n.easing),s(t)},cancel:c}}function qt(e,t,n){var i,r=t.Move,o=t.Controller,s=t.Scroll,c=t.Elements.list,u=a(z,c,"transition");function l(){u(""),s.cancel()}return{mount:function(){_e(e).bind(c,"transitionend",(function(e){e.target===c&&i&&(l(),i())}))},start:function(t,a){var c=r.toPosition(t,!0),l=r.getPosition(),d=function(t){var i=n.rewindSpeed;if(e.is(_t)&&i){var r=o.getIndex(!0),a=o.getEnd();if(0===r&&t>=a||r>=a&&0===t)return i}return n.speed}(t);re(c-l)>=1&&d>=1?n.useScroll?s.scroll(c,d,!1,a):(u("transform "+d+"ms "+n.easing),r.translate(c,!0),i=a):(r.jump(t),a())},cancel:l}}var Ut=function(){function e(t,n){var i;this.event=_e(),this.Components={},this.state=(i=1,{set:function(e){i=e},is:function(e){return w(y(e),i)}}),this.splides=[],this._o={},this._E={};var r=m(t)?U(document,t):t;$(r,r+" is invalid."),this.root=r,n=D({label:F(r,qe)||"",labelledby:F(r,Ue)||""},Wt,e.defaults,n||{});try{D(n,JSON.parse(F(r,Z)))}catch(e){$(!1,"Invalid JSON")}this._o=Object.create(D({},n))}var n,i,a=e.prototype;return a.mount=function(e,t){var n=this,i=this.state,r=this.Components;return $(i.is([1,7]),"Already mounted!"),i.set(1),this._C=r,this._T=t||this._T||(this.is(Dt)?Xt:qt),this._E=e||this._E,_(T({},Rt,this._E,{Transition:this._T}),(function(e,t){var i=e(n,r,n._o);r[t]=i,i.setup&&i.setup()})),_(r,(function(e){e.mount&&e.mount()})),this.emit(pe),L(this.root,vt),i.set(3),this.emit(me),this},a.sync=function(e){return this.splides.push({splide:e}),e.splides.push({splide:this,isParent:!0}),this.state.is(3)&&(this._C.Sync.remount(),e.Components.Sync.remount()),this},a.go=function(e){return this._C.Controller.go(e),this},a.on=function(e,t){return this.event.on(e,t),this},a.off=function(e){return this.event.off(e),this},a.emit=function(e){var t;return(t=this.event).emit.apply(t,[e].concat(o(arguments,1))),this},a.add=function(e,t){return this._C.Slides.add(e,t),this},a.remove=function(e){return this._C.Slides.remove(e),this},a.is=function(e){return this._o.type===e},a.refresh=function(){return this.emit(ye),this},a.destroy=function(e){void 0===e&&(e=!0);var t=this.event,n=this.state;return n.is(1)?_e(this).on(me,this.destroy.bind(this,e)):(_(this._C,(function(t){t.destroy&&t.destroy(e)}),!0),t.emit(Se),t.destroy(),e&&r(this.splides),n.set(7)),this},n=e,(i=[{key:"options",get:function(){return this._o},set:function(e){this._C.Media.set(e,!0,!0)}},{key:"length",get:function(){return this._C.Slides.getLength(!0)}},{key:"index",get:function(){return this._C.Controller.getIndex()}}])&&t(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();Ut.defaults={},Ut.STATES=i,function(){const t=document.getElementById("navBtn"),n=document.getElementById("nav");let i=!1;t.addEventListener("click",(()=>{i?(t.src="./img/shared/icon-hamburger.svg",i=!1):(t.src="./img/shared/icon-close.svg",i=!0),n.classList.toggle("navPhoneStyle")}));const r=Array.from(document.querySelectorAll(".navOpt"));r.forEach((t=>{t.addEventListener("click",(()=>{r.forEach((e=>e.classList.remove("selectedLi"))),0==t.dataset.page&&e(),1==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("destination");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m" ><span class="fw-700">01</span>pick your destination</h5><section class="dest-cont"><img draggable="false" id="destImg" src="./img/destination/image-moon.png" alt="moon"><section class="dest-text-cont"><ul><li data-num="0" class="destOpt selectedDestOpt | clr-sec fs-bodytxt ff-bar upper-case">moon</li><li data-num="1" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">mars</li><li data-num="2" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">europa</li><li data-num="3" class="destOpt | clr-sec fs-bodytxt ff-bar upper-case">titan</li></ul><h2 id="destName" class="clr-accent ff-bell fs-h2 upper-case ">moon</h2><p id="destDesc" class="dest-desc | text-align-resp long-txt clr-sec fs-bodytxt ff-bar">See our planet as you’ve never seen it before. A perfect relaxing trip away to help regain perspective and come back refreshed. While you’re there, take in some history by visiting the Luna 2 and Apollo 11 landing sites.</p><section class="dest-data-cont"><h5 class="fs-bodytxt clr-sec ff-bar upper-case">avg. distance</h5><p id="destDist" class="clr-accent fs-h5 ff-bell upper-case fw-500">348,400 km</p><h5 class="fs-bodytxt clr-sec ff-bar upper-case">est. travel time</h5><p id="destTime" class="clr-accent fs-h5 ff-bell upper-case fw-500">3 days</p></section></section></section>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("destinationBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),function(){const e=Array.from(document.querySelectorAll(".destOpt")),t=[{title:"Moon",text:"See our planet as you’ve never seen it before. A perfect relaxing trip away to help regain perspective and come back refreshed. While you’re there, take in some history by visiting the Luna 2 and Apollo 11 landing sites.",url:"./img/destination/image-moon.png",dist:"384,400 km",time:"3 days"},{title:"Mars",text:"Don’t forget to pack your hiking boots. You’ll need them to tackle Olympus Mons, the tallest planetary mountain in our solar system. It’s two and a half times the size of Everest!",url:"./img/destination/image-mars.png",dist:"225 mil. km",time:"9 months"},{title:"Europa",text:"The smallest of the four Galilean moons orbiting Jupiter, Europa is a winter lover’s dream. With an icy surface, it’s perfect for a bit of ice skating, curling, hockey, or simple relaxation in your snug wintery cabin.",url:"./img/destination/image-europa.png",dist:"628 mil. km",time:"3 years"},{title:"Titan",text:"  The only moon known to have a dense atmosphere other than Earth, Titan is a home away from home (just a few hundred degrees colder!). As a bonus, you get striking views of the Rings of Saturn.",url:"./img/destination/image-titan.png",dist:"1.6 bil. km",time:"7 years"}],n=document.getElementById("destImg"),i=document.getElementById("destName"),r=document.getElementsByClassName("dest-desc"),o=document.getElementById("destDist"),a=document.getElementById("destTime");e.forEach((s=>{s.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("selectedDestOpt")})),s.classList.add("selectedDestOpt"),n.src=t[s.dataset.num].url,i.innerHTML=t[s.dataset.num].title,r[0].innerHTML=t[s.dataset.num].text,o.innerHTML=t[s.dataset.num].dist,a.innerHTML=t[s.dataset.num].time}))}))}()}(),2==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("crew");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m"><span class="fw-700">02</span>meat your crew</h5><section class="splide" aria-label="crew slider"><div class="splide__track"><ul class="splide__list"><li class="splide__slide"><img class="crewImg" src="./img/crew/image-douglas-hurley.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-mark-shuttleworth.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-victor-glover.webp"></li><li class="splide__slide"><img class="crewImg" src="./img/crew/image-anousheh-ansari.webp"></li></ul></div></section><section class="memberDesc | margin-block-500"><h5 id="crewRole" class="fs-h5 text-align-resp upper-case clr-accent2 ff-bell">commander</h5><h4 class="crewName | fs-h4 text-align-resp upper-case clr-accent ff-bell">douglas hurley</h4><p id="crewText" class="fs-bodytxt margin-bottom-650 text-align-resp clr-sec ff-bar long-txt">Douglas Gerald Hurley is an American engineer, former Marine Corps pilot and former NASA astronaut. He launched into space for the third time as commander of Crew Dragon Demo-2.</p></section>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("crewBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),new Ut(".splide").mount(),function(){const e=Array.from(document.querySelectorAll(".splide__slide")),t=new MutationObserver((function(e,t){for(let t=0;t<e.length;t++)if(e[t].target.attributes[0].textContent.includes("is-active")){i.innerHTML=n[e[t].target.ariaLabel[0]-1].role,r.innerHTML=n[e[t].target.ariaLabel[0]-1].name,o.innerHTML=n[e[t].target.ariaLabel[0]-1].text;break}}));e.forEach((e=>{t.observe(e,{attributes:!0})}));const n=[{role:"Commander",name:"Douglas Hurley",text:"Douglas Gerald Hurley is an American engineer, former Marine Corps pilot and former NASA astronaut. He launched into space for the third time as commander of Crew Dragon Demo-2."},{role:"Mission Specialist",name:"Mark Shuttleworth",text:"Mark Richard Shuttleworth is the founder and CEO of Canonical, the company behind the Linux-based Ubuntu operating system. Shuttleworth became the first South African to travel to space as a space tourist."},{role:"Pilot",name:"Victor Glover",text:"Pilot on the first operational flight of the SpaceX Crew Dragon to the International Space Station. Glover is a commander in the U.S. Navy where he pilots an F/A-18.He was a crew member of Expedition 64, and served as a station systems flight engineer. "},{role:"Flight Engineer",name:"Anousheh Ansari",text:"Anousheh Ansari is an Iranian American engineer and co-founder of Prodea Systems. Ansari was the fourth self-funded space tourist, the first self-funded woman to fly to the ISS, and the first Iranian in space. "}],i=document.getElementById("crewRole"),r=document.getElementsByClassName("crewName")[0],o=document.getElementById("crewText")}()}(),3==t.dataset.page&&function(){const e=document.getElementsByTagName("main"),t=document.getElementById("technology");e[0].innerHTML='<h5 class="module-title | clr-accent ff-bar upper-case fs-h5 char-space-m" ><span class="fw-700">03</span>space launch 101</h5><div class="contToAvoidPadding | margin-block-500"><img class="launchL" draggable="false" id="techImg" src="./img/technology/image-launch-vehicle-landscape.jpg" alt="launch"></div><span class="techCont"><article class="termCont | flex"><ul class="techBtnLs | flex"><li class="selcetedBtn techBtn " data-num="0">1</li><li class="techBtn " data-num="1">2</li><li class="techBtn " data-num="2">3</li></ul><section class="techTextCont | flex"><h5 class="fs-h5 upper-case clr-sec ff-bar text-align-resp char-space-s">The terminology...</h5><h3 class="techName | fs-h4 upper-case clr-accent ff-bell text-align-resp">Launch vehicle</h3><p class="techDesc | long-txt fs-bodytxt text-align-resp ff-bar clr-sec margin-bottom-650">A launch vehicle or carrier rocket is a rocket-propelled vehicle used to carry a payload from Earth\'s surface to space, usually to Earth orbit or beyond. Our WEB-X carrier rocket is the most powerful in operation. Standing 150 metres tall, it\'s quite an awe-inspiring sight on the launch pad!</p></section></article></span>',e[0].classList.remove("home"),document.body.className="",document.body.classList.add("technologyBG"),document.body.classList.add("padding-500"),t.classList.add("selectedLi"),function(){const e=Array.from(document.querySelectorAll(".techBtn")),t=[{title:"Launch vehicle",text:"A launch vehicle or carrier rocket is a rocket-propelled vehicle used to carry a payload from Earth's surface to space, usually to Earth orbit or beyond. Our WEB-X carrier rocket is the most powerful in operation. Standing 150 metres tall, it's quite an awe-inspiring sight on the launch pad!",urlLs:"./img/technology/image-launch-vehicle-landscape.jpg",class:"launchL"},{title:"Spaceport",text:"A spaceport or cosmodrome is a site for launching (or receiving) spacecraft, by analogy to the seaport for ships or airport for aircraft. Based in the famous Cape Canaveral, our spaceport is ideally situated to take advantage of the Earth’s rotation for launch.",urlLs:"./img/technology/image-spaceport-landscape.jpg",class:"spaceportL"},{title:"Space capsule",text:"A space capsule is an often-crewed spacecraft that uses a blunt-body reentry capsule to reenter the Earth's atmosphere without wings. Our capsule is where you'll spend your time during the flight. It includes a space gym, cinema, and plenty of other activities to keep you entertained.",urlLs:"./img/technology/image-space-capsule-landscape.jpg",class:"capsuleL"}],n=document.getElementById("techImg"),i=document.getElementsByClassName("techName"),r=document.getElementsByClassName("techDesc");e.forEach((o=>{o.addEventListener("click",(()=>{e.forEach((e=>{e.classList.remove("selcetedBtn")})),o.classList.add("selcetedBtn"),n.className="",n.classList.add(t[o.dataset.num].class),n.src=t[o.dataset.num].urlLs,i[0].innerHTML=t[o.dataset.num].title,r[0].innerHTML=t[o.dataset.num].text}))}))}()}()}))}))}(),e()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,